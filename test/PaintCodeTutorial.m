//
//  PaintCodeTutorial.m
//  PaintCodeTutorial
//
//  Created by lyh on 2017/4/13.
//  Copyright (c) 2017 dopeng. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PaintCodeTutorial.h"


@implementation PaintCodeTutorial

#pragma mark Cache

static UIColor* _color = nil;

static UIImage* _imageOfStopwatch = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 0.067 green: 0.553 blue: 0.855 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }

#pragma mark Drawing Methods

+ (void)drawStopwatch
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 30, 220, 220)];
    [PaintCodeTutorial.color setFill];
    [ovalPath fill];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(114, 2, 22, 34)];
    [PaintCodeTutorial.color setFill];
    [rectanglePath fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(214.14, 30)];
    [bezierPath addLineToPoint: CGPointMake(235.36, 51.22)];
    [bezierPath addLineToPoint: CGPointMake(221.21, 65.36)];
    [bezierPath addCurveToPoint: CGPointMake(216.21, 60.36) controlPoint1: CGPointMake(221.21, 65.36) controlPoint2: CGPointMake(219.1, 63.25)];
    [bezierPath addLineToPoint: CGPointMake(205, 60.36)];
    [bezierPath addCurveToPoint: CGPointMake(205, 49.14) controlPoint1: CGPointMake(205, 60.36) controlPoint2: CGPointMake(205, 54.25)];
    [bezierPath addCurveToPoint: CGPointMake(200, 44.14) controlPoint1: CGPointMake(202.11, 46.25) controlPoint2: CGPointMake(200, 44.14)];
    [bezierPath addLineToPoint: CGPointMake(214.14, 30)];
    [bezierPath closePath];
    [PaintCodeTutorial.color setFill];
    [bezierPath fill];
}

+ (void)drawDrawStopwatch_Hand
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 125, 110);

    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(4, -90)];
    [bezier2Path addCurveToPoint: CGPointMake(4, -14.46) controlPoint1: CGPointMake(4, -90) controlPoint2: CGPointMake(4, -47.74)];
    [bezier2Path addCurveToPoint: CGPointMake(15, 0) controlPoint1: CGPointMake(10.34, -12.71) controlPoint2: CGPointMake(15, -6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 14.46) controlPoint1: CGPointMake(15, 6.9) controlPoint2: CGPointMake(10.34, 12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 25) controlPoint1: CGPointMake(4, 20.99) controlPoint2: CGPointMake(4, 25)];
    [bezier2Path addLineToPoint: CGPointMake(-4, 25)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, 14.46) controlPoint1: CGPointMake(-4, 25) controlPoint2: CGPointMake(-4, 20.99)];
    [bezier2Path addCurveToPoint: CGPointMake(-15, 0) controlPoint1: CGPointMake(-10.34, 12.71) controlPoint2: CGPointMake(-15, 6.9)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -14.46) controlPoint1: CGPointMake(-15, -6.9) controlPoint2: CGPointMake(-10.34, -12.71)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -90) controlPoint1: CGPointMake(-4, -47.74) controlPoint2: CGPointMake(-4, -90)];
    [bezier2Path addLineToPoint: CGPointMake(4, -90)];
    [bezier2Path addLineToPoint: CGPointMake(4, -90)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];

    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfStopwatch
{
    if (_imageOfStopwatch)
        return _imageOfStopwatch;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 250), NO, 0.0f);
    [PaintCodeTutorial drawStopwatch];

    _imageOfStopwatch = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfStopwatch;
}

#pragma mark Customization Infrastructure

- (void)setStopwatchTargets: (NSArray*)stopwatchTargets
{
    _stopwatchTargets = stopwatchTargets;

    for (id target in self.stopwatchTargets)
        [target setImage: PaintCodeTutorial.imageOfStopwatch];
}


@end
